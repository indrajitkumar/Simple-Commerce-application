# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build
      - name: Build & Test with Gradle
        shell: bash
        run: |
          echo 'Running build'
          ./gradlew --refresh-dependencies --full-stacktrace clean assembleRelease \
           :app:testReleaseUnitTest
      - name: Validate Gradle wrapper
          uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Publish package
          uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
          with:
            arguments: publish
          env:
            MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
#      - name: Publish To Artifactory
#        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/develop')
#        shell: bash
##        env:
##          USERNAME: ${{ secrets.FUNCTIONAL_ACCOUNT_CODE1_ID }}
##          PASSWORD: ${{ secrets.ARTIFACTORY_API_KEY }}
#        run: |
#            ./gradlew --full-stacktrace artifactoryPublish :app:printArtifactoryApkPath
#            apkname=`xargs < apkname.txt`
#            dependenciesName=${apkname/.apk/.gradledependencies.gz}
#            ./gradlew -Dorg.gradle.parallel=false reportAllProjectDependencies | gzip -9 > ./allProjects.gradledependencies.gz
##            curl -L -u $USERNAME:$PASSWORD -X PUT "${dependenciesName}" -T ./allProjects.gradledependencies.gz
#      - name: Upload APK's
#        if: startsWith(github.ref, 'refs/heads/release/app_')
#        uses: actions/upload-artifact@v3.1.0
#        with:
#          name: APK's
#          path: |
#            ${{github.workspace}}/app/build/outputs/apk/release/*.apk
      - name: Lint
        shell: bash
        run: |
          ./gradlew  \
           :app:lint

#      - name: Build & Publish Debug APK
#          uses: action/action-release-debugapk@0.0.7
#          env:
#            GITHUB_TOKEN: ${{ secrets.TOKEN }}
#            APP_FOLDER: app
#name: Android CI
#
#on:
#  workflow_dispatch:
#  push:
#    branches:
#      - '**'
#
#  #Set your workflow to run every day of the week at 16:00 UTC(9:30 PM)
#  schedule:
#    - cron:  0 16 * * 0-6
#
#jobs:
#  Build:
#
#    runs-on: [self-hosted, android]
#
#    steps:
#      - uses: actions/checkout@v2.3.3
#        with:
#          fetch-depth: 0
#          clean: true
#          submodules: true
#          lfs: true
#
#      - name: Set env
#        run: |
#          echo "EPOCH_TIME=$(date +%s)" >> $GITHUB_ENV
#          echo $EPOCH_TIME
#
#      - name: Build & Test with Gradle
#        shell: bash
#        run: |
#          echo 'Running build'
#          ./gradlew --refresh-dependencies --full-stacktrace clean assembleRelease \
#           :app:testReleaseUnitTest
#
#      #publish to artifactory only if the branch is either 'master' or 'develop' or 'release/platform_*'
#      #    - name: Publish To Artifactory
#      #      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/release/platform_')
#      #      shell: bash
#      #      env:
#      #        USERNAME: ${{ secrets.FUNCTIONAL_ACCOUNT_CODE1_ID }}
#      #        PASSWORD: ${{ secrets.ARTIFACTORY_API_KEY }}
#      #      run: |
#      #          ./gradlew --full-stacktrace saveResDep saveAllResolvedDependenciesGradleFormat zipDocuments artifactoryPublish :referenceApp:printArtifactoryApkPath :AppInfra:zipcClogs :securedblibrary:zipcClogs :pim:zipcClogs :conversationalChatBot:zipcClogs :postpurchase-care-sdk:zipcClogs :productselection:zipcClogs :digitalCareUApp:zipcClogs :digitalCare:zipcClogs :pimApp:zipcClogs
#      #          apkname=`xargs < apkname.txt`
#      #          dependenciesName=${apkname/.apk/.gradledependencies.gz}
#      #          ./gradlew -Dorg.gradle.parallel=false reportAllProjectDependencies | gzip -9 > ./allProjects.gradledependencies.gz
#      #          curl -L -u $USERNAME:$PASSWORD -X PUT "${dependenciesName}" -T ./allProjects.gradledependencies.gz
#      #
#      - name: Upload APK's
#        if: startsWith(github.ref, 'refs/heads/release/platform_')
#        uses: actions/upload-artifact@v3.1.0
#        with:
#          name: APK's
#          path: |
#            ${{github.workspace}}/app/build/outputs/apk/release/*.apk
#
#      - name: Upload Dependencies.lock file
#        if: startsWith(github.ref, 'refs/heads/release/platform_')
#        uses: actions/upload-artifact@v3.1.0
#        with:
#          name: dependencies.lock
#          path: |
#            ${{github.workspace}}/app/*dependencies*.lock
#
#      #    - name: Jacoco Reports
#      #      shell: bash
#      #      run: |
#      #           ./gradlew test
#      #           ./gradlew jacocoTestReport
#
#      - name: Lint
#        shell: bash
#        run: |
#          ./gradlew  \
#           :app:lint
#
#  App-Center:
#    if: startsWith(github.ref, 'refs/heads/release/platform_')
#    needs: Build
#    runs-on: [self-hosted, linux]
#    steps:
#      - name: Download a Build Artifact
#        uses: actions/download-artifact@v2.0.6
#        with:
#          name: APK's
#          path: '${{github.workspace}}/APK'
#
#      - name: List Artifacts
#        run: |
#          pwd
#          ls ${{github.workspace}}
#          ls ${{github.workspace}}/APK/*
#          ls ${{github.workspace}}/APK/app/build/outputs/apk/release/
#
#      - name: App Center Deploy
#        uses: wzieba/AppCenter-Github-Action@v1.3.3
#        with:
#          appName: EMS-Team/mobile-plf-android
#          token: ${{secrets.APP_CENTER_TOKEN}}
#          # Distribution group
#          group: UDI
#          # Artefact to upload (.apk)
#          file: APK/app/build/outputs/apk/release/app-release.apk
#          # If true, send an email notification to the distribution group
#          notifyTesters: true
#          debug: true
